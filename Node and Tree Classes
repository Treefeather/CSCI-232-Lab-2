// tree.java
// demonstrates binary tree
// to run this program: C>java TreeApp
import java.io.*;
import java.util.*; // for Stack class
////////////////////////////////////////////////////////////////

package lab_2;

public class Node implements Comparable<Node>{             //TA assist on format
    private char name;
    private Node leftChild;
    private Node rightChild;
    
    Node(int n){          //TA assist on format
        this.name = n;
        this.leftChild = null;
        this.rightChild = null;
    }
    
    Node(Node l, Node r){
        this.value = '\0';
        this.weight = l.weight +r.weight;
        this.leftChild = l;
        this.rightChild = r;
    }
   
    public void setName(int n)
    {
        name = n;
    }
    
    public char getName()
    {
        return value;
    }
    public void setLeft(Node newLeft)
    {
        leftChild = newLeft;
    }
    public void setRight(Node newRight)
    {
        rightChild = newRight;
    }
    public Node getLeft()
    {
        return leftChild;
    }
    public Node getRight()
    {
        return rightChild;
    }
} // end class Node
////////////////////////////////////////////////////////////////

class Tree
{
    String acc = "";
	private Node root; // first node of tree
	// -------------------------------------------------------------
	public Tree() // constructor
	{ root = null; } // no nodes in tree yet
	//-------------------------------------------------------------
	public boolean find(Node node) // find node with given key
	{ // (assumes non-empty tree)
		Node current = root; // start at root
		while(current.getName() != node.getName()) // while no match,
		{
			if(node.getName() < current.getName()) // go left?
				current = current.getLeft();
			else // or go right?
				current = current.getRight();
			if(current == null) // if no child,
				return false; // didn't find it
		}
		return true; // found it
	} // end find()
	// -------------------------------------------------------------
	// -------------------------------------------------------------
	public void insert(Node newNode)
	{
		if(root==null) // no node in root
			root = newNode;
		else // root occupied
		{
			Node current = root; // start at root
			Node parent;
			while(true) // (exits internally)
			{
				parent = current;
				if(newNode.getWeight() < current.getWeight()) // go left?
				{
					current = current.getLeft();
					if(current == null) // if end of the line,
					{ // insert on left
						parent.setLeft(newNode);
						return;
					}
				} // end if go left
				else // or go right?
				{
					current = current.getRight();
					if(current == null) // if end of the line
					{ // insert on right
						parent.setRight(newNode);
						return;
					}
				} // end else go right
			} // end while
		} // end else not root
	} // end insert()
	// -------------------------------------------------------------
//	public boolean delete(int key) // delete node with given key
//	{ // (assumes non-empty list)
//		Node current = root;
//		Node parent = root;
//		boolean isgetLeft() = true;
//		while(current.getName() != key) // search for node
//		{
//			parent = current;
//			if(key < current.getWeight()) // go left?
//			{
//				isgetLeft() = true;
//				current = current.getLeft();
//			}
//			else // or go right?
//			{
//				isgetLeft() = false;
//				current = current.getRight();
//			}
//			if(current == null) // end of the line,
//				return false; // didn't find it
//		} // end while
//		// found node to delete
//		// if no children, simply delete it
//		if(current.getLeft()==null &&
//				current.getRight()==null)
//		{
//			if(current == root) // if root,
//				root = null; // tree is empty
//			else if(isgetLeft())
//				parent.getLeft() = null; // disconnect
//			else // from parent
//				parent.getRight() = null;
//		}
//		// if no right child, replace with left subtree
//		else if(current.getRight()==null)
//			if(current == root)
//				root = current.getLeft();
//			else if(isgetLeft())
//				parent.getLeft() = current.getLeft();
//			else
//				parent.getRight() = current.getLeft();
//		// if no left child, replace with right subtree
//		else if(current.getLeft()==null)
//			if(current == root)
//				root = current.getRight();
//			else if(isgetLeft())
//				parent.getLeft() = current.getRight();
//			else
//				parent.getRight() = current.getRight();
//		else // two children, so replace with inorder successor
//		{
//			// get successor of node to delete (current)
//			Node successor = getSuccessor(current);
//			// connect parent of current to successor instead
//			if(current == root)
//				root = successor;
//			else if(isgetLeft())
//				parent.getLeft() = successor;
//			else
//				parent.getRight() = successor;
//			// connect successor to current's left child
//			successor.getLeft() = current.getLeft();
//		} // end else two children
//		// (successor cannot have a left child)
//		return true; // success
//	} // end delete()
//	// -------------------------------------------------------------
	// returns node with next-highest value after delNode
	// goes to right child, then right child's left descendents
//	private Node getSuccessor(Node delNode)
//	{
//		Node successorParent = delNode;
//		Node successor = delNode;
//		Node current = delNode.getRight(); // go to right child
//		while(current != null) // until no more
//		{ // left children,
//			successorParent = successor;
//			successor = current;
//			current = current.getLeft(); // go to left child
//		}
//		// if successor not
//		if(successor != delNode.getRight()) // right child,
//		{ // make connections
//			successorParent.getLeft() = successor.getRight();
//			successor.getRight() = delNode.getRight();
//		}
//		return successor;
//	}
	// -------------------------------------------------------------
	public void traverse(int traverseType)
	{
		switch(traverseType)
		{
		case 1: //System.out.print("\nPreorder traversal: ");
		preOrder(root, acc);
		break;
		case 2: System.out.print("\nInorder traversal: ");
		inOrder(root);
		break;
		case 3: System.out.print("\nPostorder traversal: ");
		postOrder(root);
		break;
		}
		System.out.println();
	}
	// -------------------------------------------------------------
	private void preOrder(Node localRoot, String code)
	{
		if(localRoot != null)
		{
                        localRoot.setCode(code);
			//System.out.print(localRoot.getName() + " ");
			preOrder(localRoot.getLeft(), code + "0");
			preOrder(localRoot.getRight(), code + "1");

		}
	}
	// -------------------------------------------------------------

	private void inOrder(Node localRoot)
	{
		if(localRoot != null)
		{
			inOrder(localRoot.getLeft());
			System.out.print(localRoot.getName() + " ");
			inOrder(localRoot.getRight());
		}
	}
	// -------------------------------------------------------------
	private void postOrder(Node localRoot)
	{
		if(localRoot != null)
		{
			postOrder(localRoot.getLeft());
			postOrder(localRoot.getRight());
			System.out.print(localRoot.getName() + " ");
		}
	}
	// -------------------------------------------------------------
	public void displayTree()
	{
		Stack globalStack = new Stack();
		globalStack.push(root);
		int nBlanks = 32;
		boolean isRowEmpty = false;
		System.out.println(
				"......................................................");
		while(isRowEmpty==false)
		{
			Stack localStack = new Stack();
			isRowEmpty = true;
			for(int j=0; j<nBlanks; j++)
				System.out.print(' ');
			while(globalStack.isEmpty()==false)
			{
				Node temp = (Node)globalStack.pop();
				if(temp != null)
				{
					System.out.print(temp.getName() + ":" + temp.getWeight());
					localStack.push(temp.getLeft());
					localStack.push(temp.getRight());
					if(temp.getLeft() != null ||
							temp.getRight() != null)
						isRowEmpty = false;
				}
				else
				{
					System.out.print("--");
					localStack.push(null);
					localStack.push(null);
				}
				for(int j=0; j<nBlanks*2-2; j++)
					System.out.print(' ');
			} // end while globalStack not empty
			System.out.println();
			nBlanks /= 2;
			while(localStack.isEmpty()==false)
				globalStack.push( localStack.pop() );
		} // end while isRowEmpty is false
		System.out.println(
				"......................................................");
	} // end displayTree()
	// -------------------------------------------------------------
} // end class Tree
////////////////////////////////////////////////////////////////
//class TreeApp
//{
//	public static void main(String[] args) throws IOException
//	{
//		int value;
//		Tree theTree = new Tree();
//		theTree.insert(50, 1.5);
//		theTree.insert(25, 1.2);
//		theTree.insert(75, 1.7);
//		theTree.insert(12, 1.5);
//		theTree.insert(37, 1.2);
//		theTree.insert(43, 1.7);
//		theTree.insert(30, 1.5);
//		theTree.insert(33, 1.2);
//		theTree.insert(87, 1.7);
//		theTree.insert(93, 1.5);
//		theTree.insert(97, 1.5);
//		while(true)
//		{
//			System.out.print("Enter first letter of show, ");
//			System.out.print("insert, find, delete, or traverse: ");
//			int choice = getChar();
//			switch(choice)
//			{
//			case 's':
//				theTree.displayTree();
//				break;
//			case 'i':
//				System.out.print("Enter value to insert: ");
//				value = getInt();
//				theTree.insert(value, value + 0.9);
//				break;
//			case 'f':
//				System.out.print("Enter value to find: ");
//				value = getInt();
//				Node found = theTree.find(value);
//				if(found != null)
//				{
//					System.out.print("Found: ");
//					found.displayNode();
//					System.out.print("\n");
//				}
//				else
//					System.out.print("Could not find ");
//				System.out.print(value + '\n');
//				break;
//			case 'd':
//				System.out.print("Enter value to delete: ");
//				value = getInt();
//				boolean didDelete = theTree.delete(value);
//				if(didDelete)
//					System.out.print("Deleted " + value + '\n');
//				else
//					System.out.print("Could not delete ");
//				System.out.print(value + '\n');
//				break;
//			case 't':
//				System.out.print("Enter type 1, 2 or 3: ");
//				value = getInt();
//				theTree.traverse(value);
//				break;
//			default:
//				System.out.print("Invalid entry\n");
//			} // end switch
//		} // end while
//	} // end main()
//	// -------------------------------------------------------------
//	public static String getString() throws IOException
//	{
//		InputStreamReader isr = new InputStreamReader(System.in);
//		BufferedReader br = new BufferedReader(isr);
//		String s = br.readLine();
//		return s;
//	}
//	// -------------------------------------------------------------
//	public static char getChar() throws IOException
//	{
//		String s = getString();
//		return s.charAt(0);
//	}
//	//-------------------------------------------------------------
//	public static int getInt() throws IOException
//	{
//		String s = getString();
//		return Integer.parseInt(s);
//	}
//	// -------------------------------------------------------------
//} // end class TreeApp
//////////////////////////////////////////////////////////////////
